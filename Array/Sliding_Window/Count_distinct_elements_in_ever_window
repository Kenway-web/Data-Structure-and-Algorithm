// git check



Input:
N = 7, K = 4
A[] = {1,2,1,3,4,2,3}
Output: 3 4 4 3
Explanation: Window 1 of size k = 4 is
1 2 1 3. Number of distinct elements in
this window are 3. 
Window 2 of size k = 4 is 2 1 3 4. Number
of distinct elements in this window are 4.
Window 3 of size k = 4 is 1 3 4 2. Number
of distinct elements in this window are 4.
Window 4 of size k = 4 is 3 4 2 3. Number
of distinct elements in this window are 3.


Basic. ----->


          Total no. of windows = n-k+1

	 counting number of occurrence of a particular element in that window is  = n^2
	
	 TC= O ( (n-k+1)*n^2)


Better approach: ---->


   Use HashMap for painting the the count of element at a particular window
   
  --  the element we are removing from the window. If its frequency is 1 just , Remove it from the HashMap
  --  else decrement the  count of the element in Hash map and move forward.  
  -- add new element in Hash with count


Tc - O(n)
Sc -O(1)






class Solution
{
    ArrayList<Integer> countDistinct(int A[], int n, int k)
    {
        ArrayList<Integer> arr=new ArrayList<>();
        
        
        HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
        
        for ( int i=0;i<k;i++)
            {
                map.put(A[i],map.getOrDefault(A[i],0)+1);
            }
            
            
        arr.add(map.size());
        
        for(int i=k;i<n;i++)
        {
            
            if(map.get(A[i-k])==1)
                    map.remove(A[i-k]);
                    
            else
                map.put(A[i-k],map.get(A[i-k]-1));
            
            map.put(A[i],map.getOrDefault(A[i],0)+1);
            
            arr.add(map.size());
        }
        
        return arr;
        
    }
}

